@page "/admin/make-admin"
@using Microsoft.EntityFrameworkCore
@using CustomFormsApp.Data
@using CustomFormsApp.Data.Models
@using CustomFormsApp.Services

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ICurrentUserService CurrentUserService
@inject NavigationManager Navigation

<PageTitle>Make Admin Utility</PageTitle>

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Admin Utility</h3>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (user != null)
            {
                <div class="alert @(user.IsAdmin ? "alert-success" : "alert-info")" role="alert">
                    <h4 class="alert-heading">Current User: @(user.FirstName) @(user.LastName)</h4>
                    <p>Email: @user.Email</p>
                    <p>Admin Status: <strong>@(user.IsAdmin ? "Admin" : "Not Admin")</strong></p>
                </div>

                @if (errorMessage != null)
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                @if (successMessage != null)
                {
                    <div class="alert alert-success">@successMessage</div>
                }

                <div class="mt-3">
                    <button class="btn @(user.IsAdmin ? "btn-danger" : "btn-success")" @onclick="ToggleAdminStatus">
                        @(user.IsAdmin ? "Remove Admin Access" : "Make Admin")
                    </button>
                    
                    <button class="btn btn-primary ms-2" @onclick="RefreshStatus">
                        Refresh Status
                    </button>

                    <button class="btn btn-info ms-2" @onclick="NavigateToDashboard">
                        Go to Admin Dashboard
                    </button>
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    <h4 class="alert-heading">User Not Found</h4>
                    <p>Your current user could not be found in the database. Please make sure you are logged in.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ClerkUserDbModel? user;
    private bool isLoading = true;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
    }

    private async Task LoadCurrentUser()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var userId = CurrentUserService.GetUserId();
            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Could not determine current user ID. Please make sure you are logged in.";
                return;
            }

            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            user = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);

            if (user == null)
            {
                errorMessage = "Your user account was not found in the database.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ToggleAdminStatus()
    {
        if (user == null) return;
        
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Reload user to ensure we have current data
            var dbUser = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == user.Id);
            if (dbUser == null)
            {
                errorMessage = "User not found in database. Refresh and try again.";
                return;
            }

            // Toggle admin status
            dbUser.IsAdmin = !dbUser.IsAdmin;
            
            await dbContext.SaveChangesAsync();
            
            // Update our local user object
            user.IsAdmin = dbUser.IsAdmin;
            
            successMessage = user.IsAdmin
                ? "Admin access granted successfully! Sign out and sign back in to apply changes."
                : "Admin access removed successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating admin status: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshStatus()
    {
        await LoadCurrentUser();
    }
    
    private void NavigateToDashboard()
    {
        Navigation.NavigateTo("/admin/dashboard");
    }
}