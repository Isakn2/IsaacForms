@page "/Account/Login"
@using Microsoft.AspNetCore.Components.Web
@using CustomFormsApp.Services
@using CustomFormsApp.Shared
@inject ClerkAuthService ClerkAuth
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime
@layout AccountLayout


<PageTitle>Login - IsaacForms</PageTitle>

<div class="container">
    <div class="row justify-content-center my-5">
        <div class="col-sm-10 col-md-8 col-lg-6 col-xl-5">
            <div class="card shadow">
                <div class="card-body p-4 p-sm-5">
                    <div class="text-center mb-4">
                        <img src="/logo.svg" alt="Logo" class="mb-3" style="height: 48px; max-width: 100%;" />
                        <h2 class="mb-1">Welcome Back</h2>
                        <p class="text-muted">Sign in to your account</p>
                    </div>
                    
                    @if (showError)
                    {
                        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                        </div>
                    }
                    
                    <div class="d-grid gap-3 mt-4">
                        <button class="btn btn-primary btn-lg" 
                                @onclick="HandleSignIn" 
                                disabled="@(isProcessing || !clerkReady)">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Signing In...</span>
                            }
                            else
                            {
                                <i class="bi bi-box-arrow-in-right me-2"></i>
                                <span>Sign In</span>
                            }
                        </button>
                        
                        <button class="btn btn-outline-primary btn-lg" 
                                @onclick="HandleSignUp" 
                                disabled="@(isProcessing || !clerkReady)">
                            <i class="bi bi-person-plus me-2"></i>
                            Create Account
                        </button>
                    </div>
                    
                    @if (!clerkReady)
                    {
                        <div class="text-center mt-4">
                            <div class="d-inline-block p-3 bg-light rounded-3">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading authentication...</span>
                                </div>
                                <div class="mt-2 small text-muted">Preparing authentication...</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isProcessing = false;
    private bool showError = false;
    private string errorMessage = string.Empty;
    private bool clerkReady = false;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeClerk();
        }
    }

    private async Task InitializeClerk()
    {
        try
        {
            isProcessing = true; // Keep UI feedback
            StateHasChanged();

            // Wait for the initialization started in App.razor to complete
            await ClerkAuth.WaitForInitializationAsync(); 
            clerkReady = await ClerkAuth.IsClerkReadyAsync();

            // Optional: Add a timeout or retry mechanism if needed, 
            // but WaitForInitializationAsync should handle the core wait.
            if (!clerkReady)
            {
                Logger.LogWarning("Clerk did not become ready after waiting.");
                ShowError("Authentication service failed to initialize properly. Please refresh.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error waiting for Clerk initialization");
            ShowError("Authentication service unavailable. Please refresh the page.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleSignIn()
    {
        try
        {
            isProcessing = true;
            StateHasChanged();
            await ClerkAuth.OpenSignIn(ReturnUrl);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sign in failed");
            ShowError("Failed to start sign in. Please try again.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleSignUp()
    {
        try
        {
            isProcessing = true;
            StateHasChanged();
            
            // Check if user is already signed in before trying to open sign-up
            bool isSignedIn = await JSRuntime.InvokeAsync<bool>("clerkInterop.isSignedIn");
            
            if (isSignedIn)
            {
                // User is already signed in, redirect them instead of showing sign-up modal
                var destination = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
                NavigationManager.NavigateTo(destination);
                return;
            }
            
            await ClerkAuth.OpenSignUp(ReturnUrl);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sign up failed");
            ShowError("Failed to start sign up. Please try again.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        showError = true;
        StateHasChanged();
    }

    private void DismissError()
    {
        showError = false;
        StateHasChanged();
    }
}