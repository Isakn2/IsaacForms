@page "/Account/Login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CustomFormsApp.Data.Models
@using CustomFormsApp.Services


@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>

<div class="row">
    <div class="col-lg-6">
        <section>
            <EditForm Model="Input" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                
                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @StatusMessage
                    </div>
                }
                
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" />
                    <label>Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" />
                    <label>Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                
                <div class="checkbox mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label>Remember me</label>
                </div>
                
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
            </EditForm>
            
            <div class="mt-3">
                <p>
                    <a href="/Account/Register">Register as a new user</a>
                </p>
                <p>
                    <a href="/Account/ForgotPassword">Forgot your password?</a>
                </p>
            </div>
        </section>
    </div>
</div>

@code {
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private string StatusMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            StatusMessage = "";
            
            // Check if user exists first
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                StatusMessage = "Invalid login attempt. Email not found.";
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(
                Input.Email,
                Input.Password,
                Input.RememberMe,
                lockoutOnFailure: true);

            if (result.Succeeded)
            {
                Logger.LogInformation("User {Email} logged in successfully", Input.Email);
                NavigationManager.NavigateTo(ReturnUrl ?? "/");
            }
            else if (result.RequiresTwoFactor)
            {
                NavigationManager.NavigateTo(
                    $"Account/LoginWith2fa?returnUrl={Uri.EscapeDataString(ReturnUrl ?? "/")}" +
                    $"&rememberMe={Input.RememberMe}");
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account {Email} locked out", Input.Email);
                StatusMessage = "Account locked out. Please try again later.";
            }
            else
            {
                Logger.LogWarning("Invalid login attempt for {Email}", Input.Email);
                StatusMessage = "Invalid login attempt. Please check your email and password.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occurred. Please try again.";
            Logger.LogError(ex, "Login error for {Email}", Input.Email);
        }
    }

    private class InputModel
    {
        [Required][EmailAddress] public string Email { get; set; } = "";
        [Required][DataType(DataType.Password)] public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }
}