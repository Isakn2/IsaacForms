@page "/forms"
@using Microsoft.AspNetCore.Components 
@using Microsoft.JSInterop 
@using CustomFormsApp.Data.Models 
@using CustomFormsApp.Services 
@using Microsoft.Extensions.Localization
@inject IFormBuilderService FormBuilderService 
@inject IFormService FormService 
@inject NavigationManager Navigation
@inject ILogger<MyForms> Logger
@inject ICurrentUserService CurrentUserService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<MyForms> Localizer

<PageTitle>@Localizer["YourForms"]</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@Localizer["YourForms"]</h1>
        <button class="btn btn-primary" @onclick="NavigateToCreateForm">
            <i class="bi bi-plus-circle me-1"></i> @Localizer["NewForm"]
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">@Localizer["Loading"]</span>
            </div>
            <p class="mt-2">@Localizer["LoadingForms"]</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
    }
    else if (forms == null || !forms.Any())
    {
        <div class="text-center p-5 border rounded bg-light">
            <i class="bi bi-journal-x display-4 text-muted"></i>
            <p class="mt-3">@Localizer["NoFormsFound"]</p>
            <button class="btn btn-primary mt-2" @onclick="NavigateToCreateForm">
                <i class="bi bi-plus-circle me-1"></i> @Localizer["CreateYourFirst"]
            </button>
        </div>
    }
    else
    {
        <div class="list-group">
            @foreach (var form in forms.OrderByDescending(f => f.UpdatedDate))
            {
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1">@form.Name</h5>
                        <small class="text-muted">
                            @Localizer["DateCreated"]: @form.CreatedDate.ToLocalTime().ToString("g") |
                            @Localizer["Updated"]: @form.UpdatedDate.ToLocalTime().ToString("g")
                        </small>
                        @if (!string.IsNullOrWhiteSpace(form.Description))
                        {
                            <p class="mb-1 mt-1 small">@form.Description</p>
                        }
                        <div class="d-flex align-items-center mt-1">
                            <span class="badge @(form.IsPublic ? "bg-success" : "bg-secondary") me-2">
                                @(form.IsPublic ? Localizer["Public"] : Localizer["Private"])
                            </span>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => NavigateToEditForm(form.Id)" title="@Localizer["Edit"]">
                            <i class="bi bi-pencil-square"></i> @Localizer["Edit"]
                        </button>
                        <button class="btn btn-sm btn-outline-info me-2" @onclick="() => NavigateToViewResponses(form.Id)" title="@Localizer["Responses"]">
                            <i class="bi bi-eye"></i> @Localizer["Responses"]
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteForm(form.Id)" title="@Localizer["Delete"]">
                            <i class="bi bi-trash"></i> @Localizer["Delete"]
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    // Renamed variable to avoid conflict with potential class name 'Forms'
    private IEnumerable<Form>? forms;
    private bool isLoading = true;
    private string? errorMessage;
    private string? currentUserId; // Keep this

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;
        currentUserId = CurrentUserService.GetUserId(); // Get user ID here

        if (string.IsNullOrEmpty(currentUserId))
        {
            errorMessage = Localizer["NotAuthenticated"];
            isLoading = false;
            // Optionally, redirect to login page
            // Navigation.NavigateTo("/Account/Login", forceLoad: true);
            return; // Stop execution if user is not logged in
        }

        // Call LoadFormsAsync directly
        await LoadFormsAsync(currentUserId);

        isLoading = false; // Set loading false after loading finishes
    }

    // --- Moved LoadFormsAsync inside @code block ---
    private async Task LoadFormsAsync(string userId)
    {
        try
        {
            forms = await FormService.GetUserFormsAsync(userId); // Assign to 'forms'
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading forms for user {UserId}", userId);
            errorMessage = Localizer["LoadError"];
            forms = Enumerable.Empty<Form>(); // Ensure forms is not null on error
        }
    }
    

    private void NavigateToCreateForm()
    {
        Navigation.NavigateTo("/form-builder");
    }

    private void NavigateToEditForm(int formId)
    {
        Navigation.NavigateTo($"/form-builder/{formId}");
    }

    private void NavigateToViewResponses(int formId)
    {
        // Get the form's templateId first (if applicable)
        var form = forms?.FirstOrDefault(f => f.Id == formId);
        
        if (form?.TemplateId.HasValue == true)
        {
            // If the form is based on a template, navigate to the template responses view
            Navigation.NavigateTo($"/responses/view/template/{form.TemplateId.Value}");
            Logger.LogInformation("Navigating to template responses view for template {TemplateId} (form {FormId})", 
                form.TemplateId.Value, formId);
        }
        else
        {
            // If it's a standalone form, navigate to the form responses view
            Navigation.NavigateTo($"/responses/view/form/{formId}");
            Logger.LogInformation("Navigating to form responses view for form {FormId}", formId);
        }
    }

    private async Task ConfirmDeleteForm(int formId)
    {
        // Find the form name for the confirmation message
        var formToDelete = forms?.FirstOrDefault(f => f.Id == formId);
        var formName = formToDelete?.Name ?? $"ID {formId}";

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", string.Format(Localizer["DeleteConfirmation"], formName));
        if (confirmed)
        {
            await DeleteFormAsync(formId);
        }
    }

    private async Task DeleteFormAsync(int formId)
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            await FormService.DeleteFormAsync(formId);

            // Refresh the list locally after successful deletion
            // Need to convert to List temporarily to use RemoveAll
            var formsList = forms?.ToList();
            formsList?.RemoveAll(f => f.Id == formId);
            forms = formsList; // Assign back to IEnumerable

            Logger.LogInformation("Form {FormId} deleted successfully.", formId);
            // await JSRuntime.InvokeVoidAsync("alert", "Form deleted successfully."); // Consider a less intrusive notification
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting form {FormId}", formId);
            errorMessage = Localizer["DeleteError"];
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}