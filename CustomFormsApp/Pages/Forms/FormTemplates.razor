@page "/templates"
@attribute [Authorize]
@using CustomFormsApp.Services
@using CustomFormsApp.Data.Models
@inject ITemplateService TemplateService
@inject NavigationManager Navigation
@inject ILogger<FormTemplates> Logger
@inject IJSRuntime JSRuntime
@inject ICurrentUserService CurrentUserService

<PageTitle>Form Templates</PageTitle>

<style>
    .badge.bg-business {
        background-color: #007bff !important; /* Blue for Business */
        color: #ffffff !important;
    }

    .badge.bg-education {
        background-color: #ffc107 !important; /* Yellow for Education */
        color: #000000 !important;
    }

    .badge.bg-feedback {
        background-color: #28a745 !important; /* Green for Feedback */
        color: #ffffff !important;
    }

    .badge.bg-events {
        background-color: #ff5722 !important; /* Orange for Events */
        color: #ffffff !important;
    }

    .badge.bg-general {
        background-color: #9e9e9e !important; /* Gray for General */
        color: #ffffff !important;
    }

    .badge.bg-default {
        background-color: #6c757d !important; /* Gray for default */
        color: #ffffff !important;
    }
</style>

@functions {
    private string GetBadgeClass(string topic)
    {
        return topic.ToLower() switch
        {
            "business" => "badge bg-business",
            "education" => "badge bg-education",
            "feedback" => "badge bg-feedback",
            "events" => "badge bg-events",
            "general" => "badge bg-general",
            _ => "badge bg-default"
        };
    }
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Form Templates</h1>
        <button class="btn btn-primary" @onclick="NavigateToCreateTemplate">
            <i class="bi bi-plus-circle me-1"></i> Create New Template
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading templates...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
    }
    else if (templates == null || !templates.Any())
    {
        <div class="text-center p-5 border rounded bg-light">
            <i class="bi bi-journal-richtext display-4 text-muted"></i>
            <p class="mt-3">No templates found.</p>
            <button class="btn btn-primary mt-2" @onclick="NavigateToCreateTemplate">
                <i class="bi bi-plus-circle me-1"></i> Create your first template
            </button>
        </div>
    }
    else
    {
        <div class="mb-4">
            <div class="btn-group" role="group">
                <button type="button" class="btn @(currentFilter == "all" ? "btn-primary" : "btn-outline-primary")" @onclick="ShowAllTemplates">
                    All Templates
                </button>
                <button type="button" class="btn @(currentFilter == "public" ? "btn-primary" : "btn-outline-primary")" @onclick="ShowPublicTemplates">
                    Public Templates
                </button>
                <button type="button" class="btn @(currentFilter == "private" ? "btn-primary" : "btn-outline-primary")" @onclick="ShowPrivateTemplates">
                    Private Templates
                </button>
            </div>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var template in filteredTemplates)
            {
                <div class="col">
                    <div class="card h-100 @(template.IsPublic ? "border-success" : "")">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@template.Title</h5>
                            @if (!string.IsNullOrWhiteSpace(template.Description))
                            {
                                <p class="card-text text-muted small mb-3">@template.Description</p>
                            }
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge @(template.IsPublic ? "bg-success" : "bg-secondary") me-2">
                                    @(template.IsPublic ? "Public" : "Private")
                                </span>
                                @if (!string.IsNullOrWhiteSpace(template.Topic))
                                {
                                    <span class="@GetBadgeClass(template.Topic)">@template.Topic</span>
                                }
                            </div>
                            <div class="mt-auto d-flex justify-content-end gap-2">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => UseTemplate(template.Id)" title="Use this template to create a new form">
                                    <i class="bi bi-plus-square"></i> Use
                                </button>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditTemplate(template.Id)" title="Edit this template">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteTemplate(template.Id, template.Title)" title="Delete this template">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                         <div class="card-footer text-muted small">
                             Created: @template.CreatedDate.ToLocalTime().ToString("g") |
                             Updated: @(template.LastModifiedDate?.ToLocalTime().ToString("g") ?? "N/A")
                         </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Template>? templates;
    private bool isLoading = true;
    private string? errorMessage;
    private string currentFilter = "all";
    
    private List<Template> filteredTemplates => templates switch {
        null => new List<Template>(),
        _ when currentFilter == "public" => templates.Where(t => t.IsPublic).OrderBy(t => t.Title).ToList(),
        _ when currentFilter == "private" => templates.Where(t => !t.IsPublic).OrderBy(t => t.Title).ToList(),
        _ => templates.OrderBy(t => t.Title).ToList()
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();
    }
    
    private void ShowAllTemplates()
    {
        currentFilter = "all";
        StateHasChanged();
    }
    
    private void ShowPublicTemplates()
    {
        currentFilter = "public";
        StateHasChanged();
    }
    
    private void ShowPrivateTemplates()
    {
        currentFilter = "private";
        StateHasChanged();
    }

    private async Task LoadTemplates()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            // This line uses the injected instance correctly
            var currentUserId = CurrentUserService.GetUserId();
            if (string.IsNullOrEmpty(currentUserId))
            {
                errorMessage = "User not authenticated.";
                isLoading = false;
                return;
            }
            // Call GetUserTemplatesAsync with the user ID
            var userTemplates = await TemplateService.GetUserTemplatesAsync(currentUserId);
            templates = userTemplates.ToList(); // Convert IEnumerable to List
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading form templates.");
            errorMessage = "Failed to load templates. Please try refreshing the page.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreateTemplate()
    {
        // Navigate to the form builder in 'template creation' mode
        // Set forceLoad to true to ensure a complete reload that will show the draft properly
        Navigation.NavigateTo("/form-builder?mode=template", true);
    }

    private void UseTemplate(int templateId)
    {
        // Navigate to the form builder, passing the template ID to populate from
        // Use NavigateTo without forceLoad to prevent page refresh
        Navigation.NavigateTo($"/form-builder?templateId={templateId}", false);
    }

    private void EditTemplate(int templateId)
    {
        // Navigate to the form builder in 'template editing' mode
        // Use NavigateTo without forceLoad to prevent page refresh
        Navigation.NavigateTo($"/form-builder/{templateId}?mode=template", false);
    }

    private async Task ConfirmDeleteTemplate(int templateId, string templateTitle) // Changed parameter name
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the template '{templateTitle}'? This action cannot be undone."); // Use templateTitle
        if (confirmed)
        {
            await DeleteTemplateAsync(templateId);
        }
    }

    private async Task DeleteTemplateAsync(int templateId)
    {
        isLoading = true; // Optional: Show loading indicator during delete
        errorMessage = null;
        StateHasChanged();

        try
        {
            await TemplateService.DeleteTemplateAsync(templateId); // This method needs to be added
            templates?.RemoveAll(t => t.Id == templateId); // Remove from list
            Logger.LogInformation("Template {TemplateId} deleted successfully.", templateId);
            // Optional: Show success message
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting template {TemplateId}", templateId);
            errorMessage = "Failed to delete the template.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI
        }
    }
}