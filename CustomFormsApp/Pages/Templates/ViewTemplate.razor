@page "/templates/view/{TemplateId:int}"
@using CustomFormsApp.Data.Models
@using CustomFormsApp.Data.Enums 
@using CustomFormsApp.Services
@using CustomFormsApp.Components.Likes
@using CustomFormsApp.Components.Comments 
@using Microsoft.AspNetCore.Components.Authorization
@inject ITemplateService TemplateService
@inject NavigationManager Navigation
@inject ILogger<ViewTemplate> Logger
@inject ICurrentUserService CurrentUserService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>View Template: @(template?.Title ?? "Loading...")</PageTitle>

<div class="container mt-4">
    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading template...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @errorMessage
        </div>
        <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/templates")'>
             <i class="bi bi-arrow-left"></i> Back to Templates
        </button>
    }
    else if (template == null)
    {
        <div class="alert alert-warning" role="alert">
            Template not found or you may not have permission to view it.
        </div>
         <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/templates")'>
             <i class="bi bi-arrow-left"></i> Back to Templates
        </button>
    }
    else
    {
        try
        {
            <!-- Template Details Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-2">
                    <h2 class="mb-0 me-3">@template.Title</h2>
                    <div class="d-flex align-items-center gap-2">
                        <LikeButton TemplateId="@template.Id" />
                        <button class="btn btn-primary" @onclick="UseTemplate" title="Create a form based on this template">
                            <i class="bi bi-plus-square me-1"></i> Use Template
                        </button>
                        @if (IsOwner())
                        {
                            <button class="btn btn-outline-secondary" @onclick="EditTemplate" title="Edit this template">
                                <i class="bi bi-pencil-square me-1"></i> Edit
                            </button>
                        }
                    </div>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrWhiteSpace(template.Description))
                    {
                        <p class="card-text">@template.Description</p>
                    }
                    else
                    {
                        <p class="card-text text-muted"><i>No description provided.</i></p>
                    }

                    <div class="row mb-3 small text-muted">
                        <div class="col-md-6">
                            <strong>Author:</strong> @(template.CreatedBy?.Username ?? "Unknown")
                        </div>
                        <div class="col-md-6">
                            <strong>Topic:</strong> @(template.Topic ?? "N/A")
                        </div>
                    </div>
                    <div class="row small text-muted">
                        <div class="col-md-6">
                            <strong>Created:</strong> @template.CreatedDate.ToLocalTime().ToString("g")
                        </div>
                        <div class="col-md-6">
                            <strong>Last Updated:</strong> @(template.LastModifiedDate?.ToLocalTime().ToString("g") ?? "N/A")
                        </div>
                    </div>
                    @if (template.TemplateTags != null && template.TemplateTags.Any())
                    {
                        <div class="mt-3">
                            <strong>Tags:</strong>
                            @foreach (var tag in template.Tags)
                            {
                                <span class="badge bg-secondary me-1">@tag.Name</span>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Template Questions Section -->
            <h3 class="mt-5 mb-3">Template Questions</h3>
            @if (template.Questions == null || !template.Questions.Any())
            {
                <p class="text-muted">This template has no questions defined.</p>
            }
            else
            {
                <div class="list-group mb-5">
                    @foreach (var question in template.Questions.OrderBy(q => q.Order))
                    {
                        <div class="list-group-item list-group-item-action flex-column align-items-start">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">@question.Order. @question.Text @(question.IsRequired ? "*" : "")</h5>
                                <small class="text-muted">Type: @question.Type</small>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(question.Description))
                            {
                                <p class="mb-1 text-muted small">@question.Description</p>
                            }
                            @if ((question.Type == QuestionType.Checkbox || question.Type == QuestionType.MultipleChoice || question.Type == QuestionType.Dropdown) && question.Options != null && question.Options.Any())
                            {
                                <div class="mt-2">
                                    <small><strong>Options:</strong></small>
                                    <ul class="list-unstyled small ms-3">
                                        @foreach (var option in string.Join('\n', question.Options).Split(new[] { '\n', ',' }, StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            <li>- @option.Trim()</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>
            }

            <!-- Comments Section -->
            <div class="comments-section mt-5 pt-4 border-top">
                <h3 class="mb-3">Comments</h3>
                <CommentList @ref="commentListRef" TemplateId="@TemplateId" />
                <CommentInput TemplateId="@TemplateId" OnCommentAdded="HandleCommentAdded" />
            </div>
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rendering template {TemplateId}: {Message}", TemplateId, ex.Message);
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i> An error occurred while displaying the template: @ex.Message
            </div>
            <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/templates")'>
                <i class="bi bi-arrow-left"></i> Back to Templates
            </button>
        }
    }
</div>

@code {
    [Parameter]
    public int TemplateId { get; set; }

    private Template? template;
    private bool isLoading = true;
    private string? errorMessage;
    private string? currentUserId;

    // Reference to the CommentList component
    private CommentList? commentListRef;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync: Starting initialization for template {TemplateId}", TemplateId);
        await LoadUserAndTemplate();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("OnAfterRenderAsync (firstRender): Checking template state for {TemplateId}", TemplateId);
            
            // This helps with auth state that might not be ready during initial load
            if (template == null && !isLoading)
            {
                Logger.LogInformation("Template was null after initial render - reloading");
                await LoadUserAndTemplate();
                StateHasChanged();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync: Parameters updated for template {TemplateId}", TemplateId);
        
        // Only reload if TemplateId has changed or template is null
        if (template == null || template.Id != TemplateId)
        {
            await LoadUserAndTemplate();
        }
    }

    private async Task LoadUserAndTemplate()
    {
        try
        {
            // First try to get the current user ID (might be null if not authenticated yet)
            currentUserId = CurrentUserService.GetUserId();
            Logger.LogInformation("LoadUserAndTemplate: CurrentUserId={UserId}", currentUserId ?? "null");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error getting current user ID, proceeding with template load anyway");
        }

        await LoadTemplateAsync();
    }

    private async Task LoadTemplateAsync()
    {
        isLoading = true;
        errorMessage = null;
        
        // Don't set template to null if it's already loaded - helps avoid flash of loading
        // Only set to null if we're actually changing templates
        if (template == null || template.Id != TemplateId)
        {
            template = null;
        }

        Logger.LogInformation("Starting to load template with ID {TemplateId}", TemplateId);

        // Force UI update to show loading spinner
        await InvokeAsync(StateHasChanged);

        if (TemplateId <= 0)
        {
            errorMessage = "Invalid Template ID.";
            isLoading = false;
            Logger.LogWarning("Invalid Template ID provided: {TemplateId}", TemplateId);
            await InvokeAsync(StateHasChanged);
            return;
        }

        try
        {
            // Fetch template including related data needed for display
            template = await TemplateService.GetTemplateAsync(TemplateId);

            if (template == null)
            {
                errorMessage = "Template not found or you may not have permission to view it.";
                Logger.LogWarning("Template with ID {TemplateId} not found", TemplateId);
            }
            else
            {
                // Check if Questions is null and log appropriately
                if (template.Questions == null)
                {
                    Logger.LogWarning("Template {TemplateId} has null Questions collection", TemplateId);
                    template.Questions = new List<Question>(); // Initialize to empty list to prevent null reference
                }

                // Ensure TemplateTags collection is initialized (not Tags which is read-only)
                if (template.TemplateTags == null)
                {
                    Logger.LogWarning("Template {TemplateId} has null TemplateTags collection", TemplateId);
                    template.TemplateTags = new List<TemplateTag>(); // Initialize to empty list
                }

                Logger.LogInformation("Successfully loaded template {TemplateId}: {Title} with {QuestionCount} questions", 
                    TemplateId, template.Title, template.Questions?.Count ?? 0);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading template with ID {TemplateId}: {Message}", TemplateId, ex.Message);
            errorMessage = $"An error occurred while loading the template details: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            
            // Force UI update after template is loaded
            await InvokeAsync(StateHasChanged);
            
            Logger.LogInformation("Finished loading template with ID {TemplateId}, isLoading={IsLoading}, hasTemplate={HasTemplate}", 
                TemplateId, isLoading, template != null);
        }
    }

    // Register for auth state changes to reload user data when auth state changes
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private void UseTemplate()
    {
        // Navigate to the form builder, passing the template ID to pre-fill
        // Add forceLoad: true to ensure a full page refresh
        Logger.LogInformation("Navigating to form builder with template ID {TemplateId}", TemplateId);
        Navigation.NavigateTo($"/form-builder?templateId={TemplateId}", forceLoad: true);
    }

    private void EditTemplate()
    {
        // Navigate to the form builder in edit mode
        Navigation.NavigateTo($"/form-builder/{TemplateId}?mode=template");
    }

    private bool IsOwner()
    {
        // Check if the current user is the creator of the template OR an admin
        bool isCreator = !string.IsNullOrEmpty(currentUserId) && template?.CreatedById == currentUserId;
        bool isAdmin = CurrentUserService.IsAdmin();
        
        return isCreator || isAdmin;
    }

    // Method to handle the event emitted by CommentInput when a comment is added
    private async Task HandleCommentAdded()
    {
        if (commentListRef != null)
        {
            Logger.LogInformation("New comment added for Template {TemplateId}, refreshing list.", TemplateId);
            
            // Force UI to re-render after the comments are refreshed
            await InvokeAsync(async () => {
                await commentListRef.LoadComments();
                StateHasChanged();
                
                // Log success for troubleshooting
                Logger.LogInformation("Comment list refreshed successfully for template {TemplateId}", TemplateId);
            });
        }
        else
        {
            Logger.LogWarning("commentListRef is null in HandleCommentAdded for Template {TemplateId}.", TemplateId);
        }
    }
}