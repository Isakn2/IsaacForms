@using CustomFormsApp.Services
@using Microsoft.Extensions.Localization
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ClerkAuthService ClerkAuth
@inject IStringLocalizer<NavMenu> Localizer
@implements IAsyncDisposable

<div class="main-nav">
    <div class="top-row navbar navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/" aria-label="@Localizer["AppName"]">
                <i class="bi bi-file-earmark-text me-2" aria-hidden="true"></i>
                <span>@Localizer["AppName"]</span>
            </a>
            <button class="navbar-toggler" 
                    @onclick="ToggleNavMenu"
                    aria-label="Toggle navigation"
                    aria-expanded="@(!_collapseNavMenu)"
                    aria-controls="main-nav-menu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>

    <div class="@NavMenuCssClass nav-scrollable" id="main-nav-menu">
        <nav class="nav flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <i class="bi bi-house-door me-2" aria-hidden="true"></i>
                    <span>@Localizer["Home"]</span>
                </NavLink>
            </div>
            
            <AuthorizeView>
                <Authorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="form-builder" Match="NavLinkMatch.Prefix">
                            <i class="bi bi-pencil-square me-2" aria-hidden="true"></i>
                            <span>@Localizer["FormBuilder"]</span>
                        </NavLink>
                    </div>

                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="templates" Match="NavLinkMatch.Prefix">
                            <i class="bi bi-file-earmark-plus me-2" aria-hidden="true"></i>
                            <span>@Localizer["Templates"]</span>
                        </NavLink>
                    </div>
                    
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="forms" Match="NavLinkMatch.Prefix">
                            <i class="bi bi-file-earmark-check me-2" aria-hidden="true"></i>
                            <span>@Localizer["MyForms"]</span>
                        </NavLink>
                    </div>
                    
                    @if (context.User.IsInRole("Admin"))
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="admin/dashboard" Match="NavLinkMatch.Prefix">
                                <i class="bi bi-speedometer2 me-2" aria-hidden="true"></i>
                                <span>Admin Dashboard</span>
                            </NavLink>
                        </div>
                    }
                    
                    <div class="nav-item px-3 mt-3">
                        <hr class="dropdown-divider bg-light opacity-25 my-2" />
                    </div>
                    
                    <div class="nav-item px-3">
                        <div class="nav-link d-flex align-items-center">
                            <i class="bi bi-person-circle me-2" aria-hidden="true"></i>
                            <span class="text-truncate text-dark">@context.User.Identity?.Name</span>
                        </div>
                    </div>
                    
                    <li class="nav-item px-3">
                        <button class="nav-link btn btn-link text-danger" @onclick="BeginSignOut" disabled="@_isLoggingOut">
                            @if (_isLoggingOut)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span> @Localizer["SigningOut"]
                            }
                            else
                            {
                                <i class="bi bi-box-arrow-right me-2" aria-hidden="true"></i> @Localizer["SignOut"]
                            }
                        </button>
                    </li>
                </Authorized>
                <NotAuthorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="templates" Match="NavLinkMatch.Prefix">
                            <i class="bi bi-file-earmark-plus me-2" aria-hidden="true"></i>
                            <span>@Localizer["Templates"]</span>
                        </NavLink>
                    </div>
                    
                    <div class="nav-item px-3 mt-3">
                        <hr class="dropdown-divider bg-light opacity-25 my-2" />
                    </div>
                    
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Login">
                            <i class="bi bi-box-arrow-in-right me-2" aria-hidden="true"></i>
                            <span>@Localizer["SignIn"]</span>
                        </NavLink>
                    </div>
                    
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Register">
                            <i class="bi bi-person-plus me-2" aria-hidden="true"></i>
                            <span>@Localizer["CreateAccount"]</span>
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </nav>
    </div>
</div>

@code {
    private bool _collapseNavMenu = false;
    private bool _isLoggingOut = false;
    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;


    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        // Subscribe directly
        ClerkAuth.UserSignedIn += OnUserStateChanged;
        // Use a lambda for UserSignedOut to match the signature
        ClerkAuth.UserSignedOut += HandleUserSignedOut;
    }

    // Handler for Sign In (matches Action<ClerkUserDto>)
    private void OnUserStateChanged(ClerkUserDto? user)
    {
        InvokeAsync(StateHasChanged); // Use InvokeAsync for thread safety
    }

    // Handler for Sign Out (matches Action)
    private void HandleUserSignedOut()
    {
        OnUserStateChanged(null); // Call the common logic with null user
    }

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private async Task BeginSignOut()
    {
        _isLoggingOut = true;
        StateHasChanged();
        try
        {
            await ClerkAuth.SignOutAsync();
            // For sign out, we need forceLoad to fully clear authentication state
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Sign out error: {ex.Message}");
            _isLoggingOut = false;
            StateHasChanged();
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Don't collapse the nav menu on navigation - keep it expanded
        InvokeAsync(StateHasChanged);
    }

    // We keep these methods but they're no longer called from the UI
    // They're kept for potential programmatic navigation
    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/Account/Login");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Account/Register");
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        // Unsubscribe directly
        ClerkAuth.UserSignedIn -= OnUserStateChanged;
        ClerkAuth.UserSignedOut -= HandleUserSignedOut;

        if (_isLoggingOut)
        {
            await Task.Delay(100); // Ensure proper cleanup if logging out
        }
    }
}