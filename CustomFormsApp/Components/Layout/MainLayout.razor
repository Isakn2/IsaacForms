@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using CustomFormsApp.Services
@using Microsoft.Extensions.Logging
@implements IDisposable

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ThemeService ThemeService
@inject AuthenticationStateProvider AuthProvider
@inject ClerkAuthService ClerkAuth
@inject ILogger<MainLayout> Logger

<div class="@($"{ThemeService.CurrentTheme}-theme")" id="main-layout">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top shadow-sm">
        <div class="container-fluid">
            <!-- Brand -->
            <a class="navbar-brand d-flex align-items-center" href="/">
                <img src="/logo.svg" alt="Logo" width="30" height="30" class="me-2" />
                IsaacForms
            </a>

            <!-- Search Bar -->
            <div class="d-none d-md-flex mx-auto w-50">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search..." 
                           @bind="searchQuery" 
                           @onkeypress="HandleSearchKeyPress" />
                    <button class="btn btn-outline-light" @onclick="PerformSearch">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <!-- Right Controls -->
            <div class="d-flex align-items-center gap-2">
                <LoginDisplay />
            </div>
        </div>
    </nav>

    <!-- Layout Row -->
    <div class="container-fluid h-100">
        <div class="row h-100">
            <!-- Sidebar - Always visible -->
            <div id="app-sidebar" @ref="sidebarElement" class="@SidebarCssClass"> 
                <NavMenu />
            </div>

            <!-- Main Content -->
            <div class="@MainContentCssClass p-4 main-content">
                @if (showErrorUI)
                {
                    <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        An error occurred while processing your request.
                        <button type="button" class="btn-close" @onclick="DismissError"></button>
                    </div>
                }

                @Body
            </div>
        </div>
    </div>
</div>

@code {
    // UI State
    private bool showErrorUI = false;
    private ElementReference sidebarElement; // Reference to the sidebar element for JS interop
    private string? clickOutsideHandlerId;

    // Auth/User Info
    private string userDisplayName = "";
    private string userRole = "";

    // Search
    private string searchQuery = "";

    private string SidebarCssClass => "col-md-3 col-lg-2 p-3 border-end sidebar";
    private string MainContentCssClass => "col-md-9 col-lg-10";
    
    private string GetInitials(string? name)
    {
        if (string.IsNullOrEmpty(name)) return "U";

        var parts = name.Split(new[] { ' ', '@' }, StringSplitOptions.RemoveEmptyEntries);
        return parts.Length > 1
            ? $"{parts[0][0]}{parts[1][0]}".ToUpper()
            : $"{parts[0][0]}".ToUpper();
    }

    private string GetUserRole(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.IsInRole("Admin") ? "Admin" : "User";
    }

    // Removed ToggleSidebar method as we don't need it anymore

    private bool IsActive(string href)
    {
        if (href == "/") return NavigationManager.Uri.EndsWith("/");
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return relativePath.StartsWith(href.TrimStart('/'));
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") PerformSearch();
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(searchQuery)}");
    }

    private void DismissError() => showErrorUI = false;

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async void HandleThemeChanged(object? sender, string newTheme)
    {
        try
        {
            // Call the JavaScript function to apply the theme
            await JSRuntime.InvokeVoidAsync("appInterop.theme.set", newTheme);
            // Update the layout's class if needed (though JS might be sufficient)
            await InvokeAsync(StateHasChanged); 
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calling JS to set theme.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        ThemeService.OnThemeChanged += HandleThemeChanged; // Subscribe to the theme change event

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            if (ClerkAuth.CurrentUser != null)
            {
                userDisplayName = ClerkAuth.CurrentUser.FirstName ?? user.Identity.Name ?? "User";
            }
            else
            {
                userDisplayName = user.Identity.Name ?? "User";
            }
            userRole = GetUserRole(user);
            await JSRuntime.InvokeVoidAsync("appInterop.theme.set", ThemeService.CurrentTheme);

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Pass the ID of the element to ignore clicks inside
            clickOutsideHandlerId = await JSRuntime.InvokeAsync<string?>("appInterop.initClickOutsideHandlers", "app-sidebar", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void InvokeClickOutside()
    {
        StateHasChanged();
    }

    public void Dispose() 
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
        ThemeService.OnThemeChanged -= HandleThemeChanged; // Unsubscribe from theme change event

        if (clickOutsideHandlerId != null)
        {
            try
            {
                _ = JSRuntime.InvokeVoidAsync("appInterop.removeClickOutsideHandlers", clickOutsideHandlerId);
            }
            catch (Exception ex) when (ex is JSDisconnectedException || ex is OperationCanceledException)
            {
                 // Ignore errors if JS runtime is already disposed during shutdown
                 Logger.LogDebug("JS Interop for click outside cleanup failed during dispose (likely expected).");
            }
            catch (Exception ex)
            {
                 Logger.LogWarning(ex, "Error removing click outside handler during dispose.");
            }
        }
    }
}