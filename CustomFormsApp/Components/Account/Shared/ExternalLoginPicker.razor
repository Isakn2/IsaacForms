@using CustomFormsApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging

<div class="external-login-picker">
    @foreach (var provider in externalProviders)
    {
        <button class="btn btn-outline-secondary w-100 mb-2"
                @onclick="() => ExternalLogin(provider.Key)"
                disabled="@(isProcessing)">
            @if (isProcessing && currentProvider == provider.Key)
            {
                <span class="spinner-border spinner-border-sm" role="status"></span>
            }
            else
            {
                <i class="bi bi-box-arrow-in-right"></i>
            }
            Log in with @provider.Value
        </button>
    }
</div>

@code {
    [Inject] private ClerkAuthService ClerkAuth { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private ILogger<ExternalLoginPicker> Logger { get; set; } = null!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;

    // Define the external providers you want to support with Clerk
    private Dictionary<string, string> externalProviders = new()
    {
        { "google", "Google" },
        { "github", "GitHub" },
        // Add other providers as needed
    };

    private bool isProcessing;
    private string? currentProvider;

    private async Task ExternalLogin(string provider)
    {
        isProcessing = true;
        currentProvider = provider;
        
        try
        {
            // Call Clerk's authentication for the specified provider
            await JSRuntime.InvokeVoidAsync("clerkInterop.authenticateWithProvider", provider);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "External authentication error");
        }
        finally
        {
            isProcessing = false;
            currentProvider = null;
            StateHasChanged();
        }
    }
}