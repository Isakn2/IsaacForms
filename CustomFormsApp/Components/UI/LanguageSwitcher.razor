<!-- LanguageSwitcher.razor -->
<select @bind="CurrentLanguage">
    <option value="en-US">English</option>
    <option value="es-ES">Espa√±ol</option>
</select>

@code {
    [Inject] NavigationManager NavManager { get; set; } = null!;
    [Inject] LocalizationService LocalizationService { get; set; } = null!;

    private string _currentLanguage = "en-US";
    public string CurrentLanguage
    {
        get => _currentLanguage;
        set
        {
            if (_currentLanguage != value)
            {
                _currentLanguage = value;
                // Use InvokeAsync to properly handle the async method call
                InvokeAsync(() => ChangeLanguage(value));
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LocalizationService.InitializeAsync();
        _currentLanguage = LocalizationService.CurrentLanguage;
    }

    private async Task ChangeLanguage(string newLang)
    {
        await LocalizationService.SetLanguageAsync(newLang);
        // Use query parameters without forcing a full page reload
        string uri = NavManager.Uri;
        
        // Build the new URL with updated culture parameter
        var uriBuilder = new UriBuilder(uri);
        var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        query["culture"] = newLang;
        uriBuilder.Query = query.ToString();
        
        NavManager.NavigateTo(uriBuilder.Uri.ToString());
    }
}
